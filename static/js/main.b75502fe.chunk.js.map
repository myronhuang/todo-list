{"version":3,"sources":["NewTodoForm.js","Todo.js","EditTodoForm.js","tester.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","newTodo","handleSubmit","bind","handleChange","event","preventDefault","this","addTodo","setState","target","name","value","className","onSubmit","htmlFor","onChange","placeholder","Component","Todo","handleRemove","handleEdit","removeTodo","id","toggleEditMode","boolean","toggleCompleted","isComplete","onClick","handleToggleCompleted","onDoubleClick","EditTodoForm","editTodo","list","isEditing","TodoList","todos","tester","todo","uuid","filter","edited","map","key","renderTodos","App","today","Date","toLocaleString","weekday","month","day","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b75502fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            newTodo: \"\"\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({\n            newTodo: \"\"\n        })\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <form className=\"NewTodoForm\"\n                  onSubmit={this.handleSubmit}>\n                <label className=\"NewTodoForm-Label\"\n                       htmlFor=\"newTodo\">+</label>\n                <input \n                       className=\"NewTodoForm-Input\"\n                       name=\"newTodo\"\n                       value={this.state.newTodo}\n                       onChange={this.handleChange}\n                       placeholder=\"Add a Todo\"\n                />\n                <button className=\"NewTodoForm-Button\">\n                    <i className=\"submit-button far fa-paper-plane\"></i></button>\n            </form>\n        )\n    }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleRemove = this.handleRemove.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n    }\n\n    handleRemove() {\n        this.props.removeTodo(this.props.id);\n    }\n\n    handleEdit() {\n        this.props.toggleEditMode(this.props.id, true);\n    }\n\n    handleToggleCompleted(boolean) {\n        this.props.toggleCompleted(this.props.id, boolean);\n    }\n\n\n    render() {\n        return (\n            <div className=\"Todo\">\n                <div className=\"Todo-Check\">\n                    {this.props.isComplete ?\n                        (<i className=\"fas fa-check-circle\"\n                            onClick={() => this.handleToggleCompleted(false)}></i>)\n                        :\n                        (<i className=\"far fa-circle\"\n                            onClick={() => this.handleToggleCompleted(true)}></i>)\n                    }\n                </div>\n\n                <div className={`Todo-Text ${this.props.isComplete ? \"complete\" : null}`}\n                     onDoubleClick={this.handleEdit}>\n                    {this.props.value}\n                </div>\n\n                <div className=\"Todo-Buttons\">\n                    <i className=\"edit-button fas fa-edit\"\n                    onClick={this.handleEdit}></i>\n                    <i className=\"delete-button fas fa-trash\"\n                    onClick={this.handleRemove}></i>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport './EditTodoForm.css';\n\nclass EditTodoForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            editTodo: this.props.value\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.editTodo(this.props.id, this.state.editTodo);\n        this.setState({\n            editTodo: \"\"\n        })\n        this.props.toggleEditMode(this.props.id, false);\n    }\n\n    handleChange(event) {\n        event.preventDefault();\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"EditTodoForm-Container\">\n                <div className='EditTodo-Check'>\n                    <i className=\"far fa-circle\"></i>\n                </div>\n                <form className=\"EditTodoForm\"\n                    onSubmit={this.handleSubmit}>\n                    <input className=\"EditTodoForm-Input\"\n                        id=\"editTodo\"\n                        name=\"editTodo\"\n                        value={this.state.editTodo}\n                        onChange={this.handleChange}\n                    />\n                    <button className=\"EditTodoForm-Button\">\n                        <i className=\"fas fa-check\"></i>\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EditTodoForm;","\nconst list = \n[\n    {\n    newTodo: \"Eat Lunch\",\n    id: 1,\n    isEditing: false,\n    isComplete: false\n    },\n    {\n    newTodo: \"Buy Snacks\",\n    id: 2,\n    isEditing: false,\n    isComplete: false\n    }\n]\n\nexport default list;\n","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm.js';\nimport Todo from './Todo.js';\nimport EditTodoForm  from './EditTodoForm.js'\nimport { v4 as uuid } from 'uuid';\nimport tester from './tester';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: tester,\n        }\n        this.addTodo = this.addTodo.bind(this);\n        this.removeTodo = this.removeTodo.bind(this);\n        this.editTodo = this.editTodo.bind(this);\n        this.toggleEditMode = this.toggleEditMode.bind(this);\n        this.toggleCompleted = this.toggleCompleted.bind(this);\n    }\n\n    addTodo(todo) {\n        let newTodo = {...todo, id: uuid(), isEditing: false, isComplete: false};\n        this.setState(state => ({\n            todos: [...state.todos, newTodo]\n        }));\n    }\n\n    removeTodo(id) {\n        this.setState(state => ({\n            todos: state.todos.filter(todo => todo.id !== id)\n        }));\n    }\n\n    editTodo(id, edited) {\n        this.setState(state => ({\n            todos: state.todos.map(todo => {\n                if(todo.id === id){\n                    todo.newTodo = edited\n                }\n                return todo;\n            })\n        }));\n    }\n\n    toggleEditMode(id, boolean) {\n        this.setState(state => ({\n            todos: state.todos.map(todo => {\n                if(todo.id === id){\n                    todo.isEditing = boolean;\n                }\n                return todo;\n            })\n        }));\n    }\n\n    toggleCompleted(id, boolean) {\n        this.setState(state => ({\n            todos: state.todos.map(todo => {\n                if(todo.id === id){\n                    todo.isComplete = boolean;\n                }\n                return todo;\n            })\n        }));\n    }\n\n    renderTodos() {\n        return (\n            <ul>\n                {this.state.todos.map(todo => (\n                    \n                    <li key={todo.id}>\n                        {todo.isEditing ?\n                            (<EditTodoForm\n                                id={todo.id} \n                                value={todo.newTodo}\n                                editTodo={this.editTodo}\n                                toggleEditMode={this.toggleEditMode}\n                            />)\n                            :\n                            (<Todo key={todo.id}\n                                id={todo.id}\n                                value={todo.newTodo}\n                                isComplete={todo.isComplete}\n                                removeTodo={this.removeTodo}\n                                toggleEditMode={this.toggleEditMode}\n                                toggleCompleted={this.toggleCompleted}\n                            />)\n                        }\n                    </li>\n                ))}\n            </ul>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"TodoList\">\n                <div className=\"Todos\">\n                    {this.renderTodos()}\n                </div>\n\n                <NewTodoForm addTodo={this.addTodo}/>\n            </div>\n        );\n    }\n}\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from './TodoList.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n\n    const date = new Date();\n    const today = date.toLocaleString('default', {weekday: 'long', month: 'long', day: 'numeric'});\n\n    return (\n      <div className=\"App\">\n        <p className=\"today\">{today}</p>\n        <TodoList />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}